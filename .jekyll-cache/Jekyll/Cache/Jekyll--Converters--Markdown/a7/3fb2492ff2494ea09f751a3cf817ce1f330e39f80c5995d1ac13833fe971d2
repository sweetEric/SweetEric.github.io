I"C<h3 id="一-自动配置流程">一、 自动配置流程</h3>
<ol>
  <li>
    <p>@SpringBootApplication
SpringBoot 的自动配置从 <strong>@SpringBootApplication</strong> 该注解开始，该注解里面包含了一个自动配置注解注解 <strong>@EnableAutoConfiguration</strong>，如下。
&lt;% highlight ruby %&gt;
@SpringBootConfiguration
@EnableAutoConfiguration
@ComponentScan(
 excludeFilters = {@Filter(
 type = FilterType.CUSTOM,
 classes = {TypeExcludeFilter.class}
), @Filter(
 type = FilterType.CUSTOM,
 classes = {AutoConfigurationExcludeFilter.class}
)}
)
&lt;%  endhighlight %&gt;</p>
  </li>
  <li>
    <p>自动配置包
在 @AutoConfigurationPackage 中 Registrar.class 里有 registerBeanDefinitions 方法里面定义了自动扫描的包，也就是默认Application类中的当前目录下的所有包</p>
  </li>
</ol>

<p>&lt;% highlight ruby %&gt;
@AutoConfigurationPackage
@Import({AutoConfigurationImportSelector.class})
public @interface EnableAutoConfiguration {
    String ENABLED_OVERRIDE_PROPERTY = “spring.boot.enableautoconfiguration”;</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Class&lt;?&gt;[] exclude() default {};

String[] excludeName() default {}; }
</code></pre></div></div>

<hr />

<p>@Import({Registrar.class})
public @interface AutoConfigurationPackage {
}</p>

<hr />

<p>static class Registrar implements ImportBeanDefinitionRegistrar, DeterminableImports {
        Registrar() {
        }</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) {
        AutoConfigurationPackages.register(registry, (new AutoConfigurationPackages.PackageImport(metadata)).getPackageName());
    }

    public Set&lt;Object&gt; determineImports(AnnotationMetadata metadata) {
        return Collections.singleton(new AutoConfigurationPackages.PackageImport(metadata));
    }
}
</code></pre></div></div>

<p>&lt;%  endhighlight %&gt;</p>

<ol>
  <li>使用默认主配置类 
使用默认的配置，这里会给spring容器导入非常多的自动配置类
&lt;% highlight ruby %&gt;
@AutoConfigurationPackage
@Import({AutoConfigurationImportSelector.class})</li>
</ol>

<hr />

<p>protected AutoConfigurationImportSelector.AutoConfigurationEntry getAutoConfigurationEntry(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata) {
        if (!this.isEnabled(annotationMetadata)) {
            return EMPTY_ENTRY;
        } else {
            AnnotationAttributes attributes = this.getAttributes(annotationMetadata);
            List<String> configurations = this.getCandidateConfigurations(annotationMetadata, attributes);
            configurations = this.removeDuplicates(configurations);
            Set<String> exclusions = this.getExclusions(annotationMetadata, attributes);
            this.checkExcludedClasses(configurations, exclusions);
            configurations.removeAll(exclusions);
            configurations = this.filter(configurations, autoConfigurationMetadata);
            this.fireAutoConfigurationImportEvents(configurations, exclusions);
            return new AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions);
        }
    }
&lt;%  endhighlight %&gt;</String></String></p>
:ET