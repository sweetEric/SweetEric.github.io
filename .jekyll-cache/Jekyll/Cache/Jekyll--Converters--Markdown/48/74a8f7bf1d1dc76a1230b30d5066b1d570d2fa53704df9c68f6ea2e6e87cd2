I"B<h2 id="一生产出现服务器异常下线">一、生产出现服务器异常下线</h2>
<ol>
  <li>
    <p>生产环境
环境:window server2008 R2 x64/4G
阿里云监控连接数下降, CPU、内存使用量减少, 而且根据异常退出的时间, 总结出一周发生一次。  <br />
<br /></p>
  </li>
  <li>
    <p>日志输出</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># A fatal error has been detected by the Java Runtime Environment:
#
#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x000000018012984f, pid=2412, tid=0x0000000000000e6c
#
# JRE version: Java(TM) SE Runtime Environment (8.0_101-b13) (build 1.8.0_101-b13)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.101-b13 mixed mode windows-amd64 compressed oops)
# Problematic frame:
# C  [tcnative-1.dll+0x12984f]
#
# Core dump written. Default location: E:\apache-tomcat-8.5.31\hs_err_pid2412.mdmp
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#
---------------  T H R E A D  ---------------
Current thread (0x000000005722b800):  JavaThread "https-openssl-apr-443-exec-15" daemon [_thread_in_native, id=3692, stack(0x0000000068860000,0x0000000068960000)]    
....    
Stack: [0x0000000068860000,0x0000000068960000],  sp=0x000000006895b120,  free space=1004k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [tcnative-1.dll+0x12984f]
C  [tcnative-1.dll+0x12e9fe]
C  [tcnative-1.dll+0x1042c]
C  [tcnative-1.dll+0x56ff]
C  0x0000000002f712a5    
....    
GC Heap History (10 events):
Event: 588.660 GC heap before
{Heap before GC invocations=185 (full 4):
 PSYoungGen      total 66560K, used 64784K [0x00000000fab00000, 0x00000000ff500000, 0x0000000100000000)
  eden space 58368K, 100% used [0x00000000fab00000,0x00000000fe400000,0x00000000fe400000)
  from space 8192K, 78% used [0x00000000fed00000,0x00000000ff344380,0x00000000ff500000)
  to   space 8704K, 0% used [0x00000000fe400000,0x00000000fe400000,0x00000000fec80000)
 ParOldGen       total 175104K, used 122664K [0x00000000f0000000, 0x00000000fab00000, 0x00000000fab00000)
  object space 175104K, 70% used [0x00000000f0000000,0x00000000f77ca218,0x00000000fab00000)
 Metaspace       used 127457K, capacity 129086K, committed 129624K, reserved 1163264K
  class space    used 14489K, capacity 14849K, committed 14936K, reserved 1048576K
Event: 588.673 GC heap after    
</code></pre></div>    </div>
    <p><br /></p>
  </li>
</ol>

<blockquote>
  <p><strong>EXCEPTION_ACCESS_VIOLATION</strong> <br />
Essentially, Java will stop with a message such as the above if a “serious” error occurs that means the JVM can’t continue to function. Usually, the most discriminating line is the first mention of a DLL, such as the line in bold above. The source of the error could be any of the following:
a bug in the JVM itself; search Google and/or the Java web site for a mention of ntdll.dll+0x2430;
a bug in some non-Java code that was being run at the time: e.g. Java might have been calling into a printer driver, graphics driver etc. <br />
官方对该错误的解释：JVM程序无法继续执行, 有可能是JVM本身的BUG, 也有可能是引入的DLL出现问题, 及一般应对策略。
<br /></p>
</blockquote>

<blockquote>
  <p><strong>C[tcnative-1.dll+0x12984f]</strong>  <br />
JVMCrash时正在执行的库文件代码。除了“C”以外, 还有可能是“V”、“j”、“v”、“J”。+0x12984f表示偏移值  <br />
FrameType Description：
C: Native C frame
j: Interpreted Java frame
V: VMframe
v: VMgenerated stub frame
J: Other frame types, including compiled Java frames   <br />
<br /></p>
</blockquote>

<blockquote>
  <p><strong>Core dump written. Default location: E:\apache-tomcat-8.5.31\hs_err_pid2412.mdmp</strong> <br />
生成的内存快照<br />
<br /></p>
</blockquote>

<blockquote>
  <p><strong>JavaThread”https-openssl-apr-443-exec-15”</strong>  <br />
标示当前正在执行的线程 <br />
<br /></p>
</blockquote>

<blockquote>
  <p><strong>GC Heap History (10 events):</strong> <br />
最后10次GC时, Java堆中各个部分的内存使用情况</p>
</blockquote>

<hr />

<h2 id="二分析">二、分析</h2>
<ol>
  <li>tcnative-1.dll： Tomcat中APR库, 可用于使用JNI的方式来读取文件以及进行网络传输。可以大大提升Tomcat对静态文件的处理性能, 同时如果你使用了HTTPS方式传输的话, 也可以提升SSL的处理性能。</li>
  <li>在日志中并无出现项目中的的相关库函数, 异常退出是本地的tcnative-1.dll库函数执行错误产生。</li>
  <li>考虑到物联网系统中暂时没有文件下载功能, 文件网络传输要求并不高, 可以考率直接换掉APR库</li>
</ol>

<hr />

<h2 id="三-解决方法">三. 解决方法</h2>
<ol>
  <li>对该tcnative-1.dll备份, D:..\apache-tomcat-8.5.43\bin 下删除该DLL库。</li>
  <li>D:..\apache-tomcat-8.5.43\conf\server.xml 某些端口使用通过APR进行初始化, 现在需要使用NIO初始化。
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> //如下
 &lt;Connector port="443" protocol="org.apache.coyote.http11.Http11AprProtocol"
            maxThreads="150" SSLEnabled="true" scheme="https" secure="true" &gt;
 &lt;Connector port="443" protocol="org.apache.coyote.http11.Http11NioProtocol"
            maxThreads="150" SSLEnabled="true" scheme="https" secure="true" &gt;
</code></pre></div>    </div>
  </li>
  <li>在测试服务器运行, 测试。</li>
</ol>
:ET