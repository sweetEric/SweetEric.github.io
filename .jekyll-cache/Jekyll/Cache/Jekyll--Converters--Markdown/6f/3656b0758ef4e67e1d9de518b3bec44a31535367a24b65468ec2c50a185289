I"{!<h1 id="原型模式">原型模式</h1>

<hr />
<h2 id="一实现方式">一.实现方式</h2>
<ol>
  <li>Prototype:原型类, 声明一个克隆自己的接口</li>
  <li>ConcretePrototype:具体的原型类, 实现一个克隆自己的操作</li>
  <li>Client: 让一个原型对象克隆自己, 从而创建一个新的对象</li>
</ol>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="sr">//</span><span class="no">Sheep</span><span class="p">.</span><span class="nf">java</span>
<span class="kp">public</span> <span class="k">class</span> <span class="nc">Sheep</span> <span class="n">implement</span> <span class="no">Clonable</span><span class="p">{</span>
<span class="vi">@Override</span>
<span class="kp">protected</span> <span class="no">Object</span> <span class="nb">clone</span><span class="p">()</span>
<span class="p">{</span>
	<span class="no">Sheep</span> <span class="n">sheep</span> <span class="o">=</span> <span class="n">null</span><span class="p">;</span>
	<span class="n">try</span><span class="p">{</span>
		<span class="n">sheep</span> <span class="o">=</span> <span class="p">(</span><span class="no">Sheep</span><span class="p">)</span><span class="k">super</span><span class="p">.</span><span class="nf">clone</span><span class="p">();</span>
	<span class="p">}</span><span class="kp">catch</span><span class="p">(</span><span class="no">Exception</span> <span class="n">e</span><span class="p">){</span>
		<span class="o">------</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="k">super</span><span class="p">.</span><span class="nf">clone</span><span class="p">();</span>
<span class="p">}</span>      

<span class="sr">//</span><span class="no">Client</span><span class="p">.</span><span class="nf">java</span>
<span class="kp">public</span> <span class="k">class</span> <span class="nc">Client</span><span class="p">{</span>
	<span class="kp">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">main</span><span class="p">(</span><span class="no">String</span><span class="p">[]</span> <span class="n">args</span><span class="p">){</span>
		<span class="no">Sheep</span> <span class="n">sheep</span> <span class="o">=</span> <span class="n">new</span> <span class="no">Sheep</span><span class="p">(</span><span class="s2">""</span><span class="p">,</span><span class="o">---</span><span class="p">);</span>
		<span class="no">Sheep</span> <span class="n">sheep2</span> <span class="o">=</span> <span class="p">(</span><span class="no">Sheep</span><span class="p">)</span><span class="n">sheep</span><span class="p">.</span><span class="nf">clone</span><span class="p">();</span>
		<span class="no">Sheep</span> <span class="n">sheep3</span> <span class="o">=</span> <span class="p">(</span><span class="no">Sheep</span><span class="p">)</span><span class="n">sheep</span><span class="p">.</span><span class="nf">clone</span><span class="p">();</span>
	<span class="p">}</span>
<span class="p">}</span>    </code></pre></figure>

<hr />
<h2 id="二分析">二、分析</h2>
<blockquote>
  <p><strong>1.在上述的clone方法中使用的是深拷贝还是浅拷贝  <br />
&gt;&gt;&gt;浅拷贝, 当类内部属性有类对象时, clone方法会将他们的的引用复制一份。  <br />
2.实现深拷贝的方式   <br />
&gt;&gt;&gt;方法1：内部类继承Clonable接口。重写clone接口时, 先进行内部类clone  <br />
&gt;&gt;&gt;方法2：通过对象的序列化实现（推荐）, 代码如下</strong></p>
</blockquote>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="sr">//</span><span class="no">Sheep</span><span class="p">.</span><span class="nf">java</span>
<span class="kp">public</span> <span class="no">Object</span> <span class="n">deepClone</span><span class="p">(){</span>
	<span class="no">ByteArrayOutputStream</span> <span class="n">bos</span> <span class="o">=</span> <span class="n">null</span><span class="p">;</span>
	<span class="no">ObjectOutputStream</span> <span class="n">oos</span> <span class="o">=</span> <span class="n">null</span><span class="p">;</span>
	<span class="no">ByteArrayInputStream</span> <span class="n">bis</span> <span class="o">=</span> <span class="n">null</span><span class="p">;</span>
	<span class="no">ObjectInputStream</span> <span class="n">ois</span> <span class="o">=</span> <span class="n">null</span><span class="p">;</span>
	<span class="n">try</span><span class="p">{</span>
		<span class="n">bos</span> <span class="o">=</span> <span class="n">new</span> <span class="no">ByteArrayOutputStream</span><span class="p">();</span>
		<span class="n">oos</span> <span class="o">=</span> <span class="n">new</span> <span class="no">ObjectOutputStream</span><span class="p">(</span><span class="n">bos</span><span class="p">);</span>
		<span class="n">oos</span><span class="p">.</span><span class="nf">writeObject</span><span class="p">(</span><span class="n">this</span><span class="p">);</span>
		<span class="n">bis</span> <span class="o">=</span> <span class="n">new</span> <span class="no">ByteArrayInputStream</span><span class="p">(</span><span class="n">bos</span><span class="p">.</span><span class="nf">toByteArray</span><span class="p">());</span>
		<span class="n">ois</span> <span class="o">=</span> <span class="n">new</span> <span class="no">ObjectInputStream</span><span class="p">(</span><span class="n">bis</span><span class="p">);</span>
		<span class="no">Sheep</span> <span class="n">copyObj</span> <span class="o">=</span> <span class="p">(</span><span class="no">Sheep</span><span class="p">)</span><span class="n">ois</span><span class="p">.</span><span class="nf">readObject</span><span class="p">();</span>
		<span class="k">return</span> <span class="n">copyObj</span><span class="p">;</span>
	<span class="p">}</span><span class="kp">catch</span><span class="p">(</span><span class="no">Exception</span> <span class="n">e</span><span class="p">){</span>
		<span class="o">-----</span>
		<span class="k">return</span> <span class="n">null</span><span class="p">;</span>
	<span class="p">}</span><span class="n">finally</span><span class="p">{</span>
		<span class="n">try</span><span class="p">{</span>
			<span class="n">bos</span><span class="p">.</span><span class="nf">close</span><span class="p">();</span>
			<span class="n">oos</span><span class="p">.</span><span class="nf">close</span><span class="p">();</span>
			<span class="n">bis</span><span class="p">.</span><span class="nf">close</span><span class="p">();</span>
			<span class="n">ois</span><span class="p">.</span><span class="nf">close</span><span class="p">();</span>
		<span class="p">}</span><span class="kp">catch</span><span class="p">(</span><span class="no">Exception</span> <span class="n">e</span><span class="p">){</span>
			<span class="o">-----</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>    

<span class="sr">//</span><span class="no">Client</span><span class="p">.</span><span class="nf">java</span>   
<span class="kp">public</span> <span class="k">class</span> <span class="nc">Client</span><span class="p">{</span>
	<span class="kp">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">main</span><span class="p">(</span><span class="no">String</span><span class="p">[]</span> <span class="n">args</span><span class="p">){</span>
		<span class="no">Sheep</span> <span class="n">sheep</span> <span class="o">=</span> <span class="n">new</span> <span class="no">Sheep</span><span class="p">(</span><span class="s2">""</span><span class="p">,</span><span class="o">---</span><span class="p">);</span>
		<span class="no">Sheep</span> <span class="n">sheep2</span> <span class="o">=</span> <span class="p">(</span><span class="no">Sheep</span><span class="p">)</span><span class="n">sheep</span><span class="p">.</span><span class="nf">deepClone</span><span class="p">();</span>
		
	<span class="p">}</span>
<span class="p">}</span>     </code></pre></figure>

<hr />
<h2 id="三总结">三、总结</h2>
<ol>
  <li>创建新的对象比较复杂时, 可以利用原型模式简化对象的创建过程, 同时也能够提供高效率。</li>
  <li>不用重新初始化对象, 而是动态地获得对象运行时的状态</li>
  <li>在实现深克隆的时候可能需要比较复杂的代码, 如果使用一个类配备一个的方式克隆, 对已有的类改造时, 要修改源代码, 违背OCP原则。</li>
</ol>

<hr />

:ET